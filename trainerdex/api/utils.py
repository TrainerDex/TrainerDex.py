from __future__ import annotations

from functools import wraps
from inspect import isawaitable
from typing import (
    Any,
    Callable,
    ParamSpec,
    Protocol,
    TypeVar,
    Union,
    overload,
    runtime_checkable,
)

P = ParamSpec("P")
T = TypeVar("T")


@overload
def convert(func: Callable[P, T]) -> Callable[P, T]:
    ...


@overload
def convert(func: Callable[P, T], *args, **kwargs) -> Union[T, None]:
    ...


def convert(func, *args, **kwargs):
    """This is very hacky!

    Generates a converter function
    Returns the function if no addictional args or kwargs are supplied, else runs the function
    """

    @wraps(func)
    def wrapper(*args, **kwargs) -> Union[Any, None]:
        """This is very hacky!

        Special converter function generated by :method:`trainerdex.api.utils.convert`

        Attempts to return the output of a function, returns None if any exception occurs.

        ONLY USE THIS IF YOU KNOW WHAT YOU'RE DOING
        """
        try:
            return func(*args, **kwargs)
        except Exception:
            return None

    if args or kwargs:
        return wrapper(*args, **kwargs)
    else:
        return wrapper


async def maybe_coroutine(f, *args, **kwargs):
    value = f(*args, **kwargs)
    if isawaitable(value):
        return await value
    else:
        return value


@runtime_checkable
class HasID(Protocol):
    id: int
